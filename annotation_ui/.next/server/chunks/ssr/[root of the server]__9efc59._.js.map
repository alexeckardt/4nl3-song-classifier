{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alexe/Documents/4nl3/4nl3-song-classifier/annotation_ui/src/trpc/query-client.ts"],"sourcesContent":["import {\r\n  defaultShouldDehydrateQuery,\r\n  QueryClient,\r\n} from \"@tanstack/react-query\";\r\nimport SuperJSON from \"superjson\";\r\n\r\nexport const createQueryClient = () =>\r\n  new QueryClient({\r\n    defaultOptions: {\r\n      queries: {\r\n        // With SSR, we usually want to set some default staleTime\r\n        // above 0 to avoid refetching immediately on the client\r\n        staleTime: 30 * 1000,\r\n      },\r\n      dehydrate: {\r\n        serializeData: SuperJSON.serialize,\r\n        shouldDehydrateQuery: (query) =>\r\n          defaultShouldDehydrateQuery(query) ||\r\n          query.state.status === \"pending\",\r\n      },\r\n      hydrate: {\r\n        deserializeData: SuperJSON.deserialize,\r\n      },\r\n    },\r\n  });\r\n"],"names":[],"mappings":";;;AAIA;AAJA;AAAA;;;AAMO,MAAM,oBAAoB,IAC/B,IAAI,6KAAA,CAAA,cAAW,CAAC;QACd,gBAAgB;YACd,SAAS;gBACP,0DAA0D;gBAC1D,wDAAwD;gBACxD,WAAW,KAAK;YAClB;YACA,WAAW;gBACT,eAAe,0IAAA,CAAA,UAAS,CAAC,SAAS;gBAClC,sBAAsB,CAAC,QACrB,CAAA,GAAA,2KAAA,CAAA,8BAA2B,AAAD,EAAE,UAC5B,MAAM,KAAK,CAAC,MAAM,KAAK;YAC3B;YACA,SAAS;gBACP,iBAAiB,0IAAA,CAAA,UAAS,CAAC,WAAW;YACxC;QACF;IACF"}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alexe/Documents/4nl3/4nl3-song-classifier/annotation_ui/src/trpc/react.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { QueryClientProvider, type QueryClient } from \"@tanstack/react-query\";\r\nimport { loggerLink, unstable_httpBatchStreamLink } from \"@trpc/client\";\r\nimport { createTRPCReact } from \"@trpc/react-query\";\r\nimport { type inferRouterInputs, type inferRouterOutputs } from \"@trpc/server\";\r\nimport { useState } from \"react\";\r\nimport SuperJSON from \"superjson\";\r\n\r\nimport { type AppRouter } from \"~/server/api/root\";\r\nimport { createQueryClient } from \"./query-client\";\r\n\r\nlet clientQueryClientSingleton: QueryClient | undefined = undefined;\r\nconst getQueryClient = () => {\r\n  if (typeof window === \"undefined\") {\r\n    // Server: always make a new query client\r\n    return createQueryClient();\r\n  }\r\n  // Browser: use singleton pattern to keep the same query client\r\n  return (clientQueryClientSingleton ??= createQueryClient());\r\n};\r\n\r\nexport const api = createTRPCReact<AppRouter>();\r\n\r\n/**\r\n * Inference helper for inputs.\r\n *\r\n * @example type HelloInput = RouterInputs['example']['hello']\r\n */\r\nexport type RouterInputs = inferRouterInputs<AppRouter>;\r\n\r\n/**\r\n * Inference helper for outputs.\r\n *\r\n * @example type HelloOutput = RouterOutputs['example']['hello']\r\n */\r\nexport type RouterOutputs = inferRouterOutputs<AppRouter>;\r\n\r\nexport function TRPCReactProvider(props: { children: React.ReactNode }) {\r\n  const queryClient = getQueryClient();\r\n\r\n  const [trpcClient] = useState(() =>\r\n    api.createClient({\r\n      links: [\r\n        loggerLink({\r\n          enabled: (op) =>\r\n            process.env.NODE_ENV === \"development\" ||\r\n            (op.direction === \"down\" && op.result instanceof Error),\r\n        }),\r\n        unstable_httpBatchStreamLink({\r\n          transformer: SuperJSON,\r\n          url: getBaseUrl() + \"/api/trpc\",\r\n          headers: () => {\r\n            const headers = new Headers();\r\n            headers.set(\"x-trpc-source\", \"nextjs-react\");\r\n            return headers;\r\n          },\r\n        }),\r\n      ],\r\n    })\r\n  );\r\n\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <api.Provider client={trpcClient} queryClient={queryClient}>\r\n        {props.children}\r\n      </api.Provider>\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n\r\nfunction getBaseUrl() {\r\n  if (typeof window !== \"undefined\") return window.location.origin;\r\n  if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL}`;\r\n  return `http://localhost:${process.env.PORT ?? 3000}`;\r\n}\r\n"],"names":[],"mappings":";;;;;AAGA;AACA;AAEA;AACA;AAGA;AANA;AADA;AAAA;AADA;AAFA;;;;;;;;AAYA,IAAI,6BAAsD;AAC1D,MAAM,iBAAiB;IACrB,wCAAmC;QACjC,yCAAyC;QACzC,OAAO,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD;IACzB;;AAGF;AAEO,MAAM,MAAM,CAAA,GAAA,oKAAA,CAAA,kBAAe,AAAD;AAgB1B,SAAS,kBAAkB,KAAoC;IACpE,MAAM,cAAc;IAEpB,MAAM,CAAC,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,IAC5B,IAAI,YAAY,CAAC;YACf,OAAO;gBACL,CAAA,GAAA,gKAAA,CAAA,aAAU,AAAD,EAAE;oBACT,SAAS,CAAC,KACR,oDAAyB,iBACxB,GAAG,SAAS,KAAK,UAAU,GAAG,MAAM,YAAY;gBACrD;gBACA,CAAA,GAAA,yKAAA,CAAA,+BAA4B,AAAD,EAAE;oBAC3B,aAAa,0IAAA,CAAA,UAAS;oBACtB,KAAK,eAAe;oBACpB,SAAS;wBACP,MAAM,UAAU,IAAI;wBACpB,QAAQ,GAAG,CAAC,iBAAiB;wBAC7B,OAAO;oBACT;gBACF;aACD;QACH;IAGF,qBACE,8OAAC,sLAAA,CAAA,sBAAmB;QAAC,QAAQ;kBAC3B,cAAA,8OAAC,IAAI,QAAQ;YAAC,QAAQ;YAAY,aAAa;sBAC5C,MAAM,QAAQ;;;;;;;;;;;AAIvB;AAEA,SAAS;IACP,uCAAmC;;IAA6B;IAChE,IAAI,QAAQ,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,QAAQ,EAAE,QAAQ,GAAG,CAAC,UAAU,EAAE;IACtE,OAAO,CAAC,iBAAiB,EAAE,QAAQ,GAAG,CAAC,IAAI,IAAI,MAAM;AACvD"}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}